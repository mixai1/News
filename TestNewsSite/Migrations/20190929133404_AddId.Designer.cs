// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestNewsSite.DataBase;

namespace TestNewsSite.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20190929133404_AddId")]
    partial class AddId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TestNewsSite.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<int?>("newsId");

                    b.HasKey("Id");

                    b.HasIndex("newsId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("TestNewsSite.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime>("DateTime");

                    b.Property<int?>("adminsId");

                    b.Property<int?>("newsId");

                    b.Property<int?>("usersId");

                    b.HasKey("Id");

                    b.HasIndex("adminsId");

                    b.HasIndex("newsId");

                    b.HasIndex("usersId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("TestNewsSite.Models.New", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Heading");

                    b.Property<string>("Img");

                    b.Property<decimal>("Positive");

                    b.Property<string>("Source");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("TestNewsSite.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<bool>("IsAdmin");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<int?>("newsId");

                    b.HasKey("Id");

                    b.HasIndex("newsId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TestNewsSite.Models.UserCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("adminId");

                    b.Property<int>("userId");

                    b.HasKey("Id");

                    b.HasIndex("adminId");

                    b.HasIndex("userId");

                    b.ToTable("UserCategories");
                });

            modelBuilder.Entity("TestNewsSite.Models.Admin", b =>
                {
                    b.HasOne("TestNewsSite.Models.New", "news")
                        .WithMany("admins")
                        .HasForeignKey("newsId");
                });

            modelBuilder.Entity("TestNewsSite.Models.Comment", b =>
                {
                    b.HasOne("TestNewsSite.Models.Admin", "admins")
                        .WithMany("comments")
                        .HasForeignKey("adminsId");

                    b.HasOne("TestNewsSite.Models.New", "news")
                        .WithMany("comments")
                        .HasForeignKey("newsId");

                    b.HasOne("TestNewsSite.Models.User", "users")
                        .WithMany("comments")
                        .HasForeignKey("usersId");
                });

            modelBuilder.Entity("TestNewsSite.Models.User", b =>
                {
                    b.HasOne("TestNewsSite.Models.New", "news")
                        .WithMany("users")
                        .HasForeignKey("newsId");
                });

            modelBuilder.Entity("TestNewsSite.Models.UserCategory", b =>
                {
                    b.HasOne("TestNewsSite.Models.Admin", "admin")
                        .WithMany("userCategories")
                        .HasForeignKey("adminId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestNewsSite.Models.User", "user")
                        .WithMany("userCategories")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
